@model IEnumerable<ShoeShopWebsite.Models.Product>

@{
    ViewData["Title"] = "Danh sách sản phẩm";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid pt-4 px-4">
    <div class="bg-light rounded p-4">
        <div class="d-flex align-items-center justify-content-between mb-4">
            <h3 class="mb-0">@ViewData["Title"]</h3>
        </div>

        <!-- Thanh tìm kiếm và bộ lọc -->
        <div class="search-filter mb-4 p-3 bg-white rounded shadow-sm">
            <div class="row g-3">
                <div class="col-md-3">
                    <input type="text" class="form-control" id="searchName" placeholder="Tìm theo tên sản phẩm" value="@ViewData["SearchName"]">
                </div>
                <div class="col-md-3">
                    <select class="form-select" id="sortPrice">
                        <option value="">Mặc định</option>
                        @if (ViewData["SortPrice"]?.ToString() == "low-to-high")
                        {
                            <option value="low-to-high" selected>Giá: Thấp đến Cao</option>
                        }
                        else
                        {
                            <option value="low-to-high">Giá: Thấp đến Cao</option>
                        }
                        @if (ViewData["SortPrice"]?.ToString() == "high-to-low")
                        {
                            <option value="high-to-low" selected>Giá: Cao đến Thấp</option>
                        }
                        else
                        {
                            <option value="high-to-low">Giá: Cao đến Thấp</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" id="filterCategory">
                        <option value="">Tất cả danh mục</option>
                        @foreach (var category in ViewData["Categories"] as IEnumerable<ShoeShopWebsite.Models.Category> ?? Enumerable.Empty<ShoeShopWebsite.Models.Category>())
                        {
                            @if (ViewData["FilterCategory"]?.ToString() == category.CategoryName)
                            {
                                <option value="@category.CategoryName" selected>@category.CategoryName</option>
                            }
                            else
                            {
                                <option value="@category.CategoryName">@category.CategoryName</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </div>

        <!-- Hiển thị sản phẩm theo danh mục -->
        <div class="product-categories">
            @if (Model != null && Model.Any())
            {
                var groupedProducts = Model.GroupBy(p => p.Category?.CategoryName ?? "Không xác định");
                foreach (var group in groupedProducts)
                {
                    <div class="category-section mb-5">
                        <h4 class="category-title">@group.Key</h4>
                        <div class="row product-grid">
                            @foreach (var item in group) // Xóa .Take(8) để hiển thị tất cả sản phẩm trong nhóm
                            {
                                <div class="col-md-3 col-6 mb-4 product-item"
                                     data-name="@item.ProductName"
                                     data-category="@item.Category?.CategoryName">
                                    <div class="product-card">
                                        @if (item.ProductImages != null && item.ProductImages.Any())
                                        {
                                            var primaryImage = item.ProductImages.FirstOrDefault(img => img.IsPrimary) ?? item.ProductImages.First();
                                            <img src="@primaryImage.ImageURL" alt="@item.ProductName" class="product-img">
                                        }
                                        else
                                        {
                                            <img src="/images/no-image.png" alt="No Image" class="product-img">
                                        }
                                        <h5 class="product-title">@item.ProductName</h5>
                                        <p class="product-price">@item.Price.ToString("N0") đ</p>
                                        <div class="btn-group">
                                            <select class="form-select form-select-sm size-select" data-id="@item.ProductID">
                                                <option value="">Chọn size</option>
                                                @foreach (var size in item.ProductSizes ?? Enumerable.Empty<ProductSize>())
                                                {
                                                    <option value="@size.SizeID">@size.Size.SizeName</option>
                                                }
                                            </select>
                                            <button class="btn btn-sm btn-light add-to-cart" data-id="@item.ProductID">
                                                <i class="fas fa-cart-plus"></i>
                                            </button>
                                            <button class="btn btn-sm btn-light add-to-wishlist wishlist-icon" data-id="@item.ProductID">
                                                <i class="fas fa-heart"></i>
                                            </button>
                                            <a href="@Url.Action("Details", "Product", new { id = item.ProductID })" class="btn btn-sm btn-light">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center">
                    <p>Không có sản phẩm nào để hiển thị.</p>
                </div>
            }
        </div>

        <!-- Phân trang -->
        @if (ViewData["TotalPages"] != null && (int)ViewData["TotalPages"] > 1)
        {
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(ViewData["CurrentPage"] as int? == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { searchName = ViewData["SearchName"], sortPrice = ViewData["SortPrice"], filterCategory = ViewData["FilterCategory"], page = (int)ViewData["CurrentPage"] - 1 })">Trước</a>
                    </li>
                    @for (int i = 1; i <= (int)ViewData["TotalPages"]; i++)
                    {
                        <li class="page-item @(i == (int)ViewData["CurrentPage"] ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { searchName = ViewData["SearchName"], sortPrice = ViewData["SortPrice"], filterCategory = ViewData["FilterCategory"], page = i })">@i</a>
                        </li>
                    }
                    <li class="page-item @(ViewData["CurrentPage"] as int? == (int)ViewData["TotalPages"] ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { searchName = ViewData["SearchName"], sortPrice = ViewData["SortPrice"], filterCategory = ViewData["FilterCategory"], page = (int)ViewData["CurrentPage"] + 1 })">Sau</a>
                    </li>
                </ul>
            </nav>
        }
    </div>
</div>

<style>
    .product-categories {
        padding: 20px 0;
    }

    .category-section {
        margin-bottom: 40px;
    }

    .category-title {
        font-size: 1.5rem;
        color: #333;
        border-bottom: 2px solid #28a745;
        padding-bottom: 10px;
        margin-bottom: 20px;
    }

    .product-grid {
        padding: 0;
    }

    .product-card {
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 15px;
        text-align: center;
        transition: transform 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        background-color: #fff;
        position: relative;
    }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    .product-img {
        max-height: 250px;
        width: 100%;
        object-fit: cover;
        margin-bottom: 10px;
        border-radius: 5px;
    }

    .product-title {
        font-size: 1.1rem;
        margin: 10px 0;
        height: 50px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .product-price {
        font-weight: bold;
        color: #28a745;
        margin-bottom: 10px;
    }

    .btn-group {
        display: flex;
        gap: 5px;
        justify-content: center;
        margin-top: auto;
        align-items: center;
    }

    .size-select {
        width: 100px;
    }

    .btn-light {
        color: #333;
        border-color: #ccc;
    }

        .btn-light:hover {
            background-color: #e9ecef;
        }

    .wishlist-icon {
        display: none;
    }

    .product-card:hover .wishlist-icon {
        display: inline-block;
    }

    .search-filter {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
    }

    .toast {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
    <script>
        $(document).ready(function () {
            console.log("jQuery đã sẵn sàng!");

            // Tìm kiếm và lọc sản phẩm qua server
            function filterProducts(page = @((int)ViewData["CurrentPage"])) {
                const name = $('#searchName').val() || '';
                const sortPrice = $('#sortPrice').val() || '';
                const category = $('#filterCategory').val() || '';

                console.log("Filtering with: ", { name, sortPrice, category, page });

                window.location.href = '@Url.Action("Index", "Product")' +
                    '?searchName=' + encodeURIComponent(name) +
                    '&sortPrice=' + encodeURIComponent(sortPrice) +
                    '&filterCategory=' + encodeURIComponent(category) +
                    '&page=' + page;
            }

            // Gắn sự kiện cho các input/select
            $('#searchName').on('input', function () { filterProducts(); });
            $('#sortPrice, #filterCategory').on('change', function () { filterProducts(); });

            // Thêm vào giỏ hàng (CartController)
            $('.add-to-cart').on('click', function () {
                const productId = $(this).data('id');
                const $sizeSelect = $(this).siblings('.size-select');
                const sizeId = $sizeSelect.val();

                if (!sizeId) {
                    showToast('Vui lòng chọn kích thước!', false);
                    return;
                }

                console.log("Thêm vào giỏ hàng - ProductID:", productId, "SizeID:", sizeId);

                $.ajax({
                    url: '@Url.Action("AddToCart", "Cart")',
                    type: 'POST',
                    data: {
                        productId: productId,
                        sizeId: sizeId,
                        colorId: null,
                        quantity: 1,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        console.log("Phản hồi từ AddToCart:", response);
                        if (response.success) {
                            showToast(response.message, true);
                            $('#cartCount').text(`Cart (${response.cartCount})`);
                            $(document).trigger('cart-updated');
                        } else {
                            showToast(response.message, false);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.log("Lỗi AJAX AddToCart:", xhr.status, xhr.responseText);
                        showToast('Đã có lỗi xảy ra: ' + error, false);
                    }
                });
            });

            // Thêm vào danh sách yêu thích (ProductController)
            $('.add-to-wishlist').on('click', function () {
                const productId = $(this).data('id');
                const $button = $(this);
                console.log("Thêm vào yêu thích - ProductID:", productId);

                $.ajax({
                    url: '@Url.Action("ToggleWishlist", "Product")',
                    type: 'POST',
                    data: {
                        productId: productId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        console.log("Phản hồi từ ToggleWishlist:", response);
                        if (response.success) {
                            $button.toggleClass('btn-light btn-danger');
                            showToast(response.message, true);
                        } else {
                            showToast(response.message, false);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.log("Lỗi AJAX ToggleWishlist:", xhr.status, xhr.responseText);
                        showToast('Đã có lỗi xảy ra: ' + error, false);
                    }
                });
            });

            // Hiển thị toast thông báo
            function showToast(message, isSuccess) {
                var toast = $('#notificationToast');
                if (toast.length === 0) {
                    $('body').append(`
                        <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                            <div class="toast-header">
                                <strong class="me-auto">Thông báo</strong>
                                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                            </div>
                            <div class="toast-body"></div>
                        </div>
                    `);
                    toast = $('#notificationToast');
                }
                toast.find('.toast-body').text(message);
                toast.removeClass('bg-success bg-danger').addClass(isSuccess ? 'bg-success' : 'bg-danger');
                toast.toast({ delay: 2000 });
                toast.toast('show');
            }
        });
    </script>
}