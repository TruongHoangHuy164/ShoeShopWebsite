@model IEnumerable<ShoeShopWebsite.Models.Product>

@{
    ViewData["Title"] = "Trang chủ - ShoeShopWebsite";
    var employeeId = ViewData["EmployeeId"]?.ToString() ?? "";
}

<!-- Banner chính -->
<div class="container-fluid p-0 mb-5">
    <div id="bannerCarousel" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-indicators">
            <button type="button" data-bs-target="#bannerCarousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
            <button type="button" data-bs-target="#bannerCarousel" data-bs-slide-to="1" aria-label="Slide 2"></button>
            <button type="button" data-bs-target="#bannerCarousel" data-bs-slide-to="2" aria-label="Slide 3"></button>
            <button type="button" data-bs-target="#bannerCarousel" data-bs-slide-to="3" aria-label="Slide 4"></button>
        </div>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="~/images/banner1z.png" class="d-block w-100" alt="Banner 1" style="max-height: 500px; object-fit: cover;">
            </div>
            <div class="carousel-item">
                <img src="~/images/banner2z.png" class="d-block w-100" alt="Banner 2" style="max-height: 500px; object-fit: cover;">
            </div>
            <div class="carousel-item">
                <img src="~/images/banner3.png" class="d-block w-100" alt="Banner 3" style="max-height: 500px; object-fit: cover;">
            </div>
            <div class="carousel-item">
                <img src="~/images/banner4.png" class="d-block w-100" alt="Banner 4" style="max-height: 500px; object-fit: cover;">
            </div>
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#bannerCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#bannerCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
</div>
<!-- Sản phẩm nổi bật -->
<div class="container mb-5">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-4 text-center">Sản phẩm nổi bật</h3>
            <div class="products-container position-relative">
                <div class="products-wrapper d-flex flex-nowrap">
                    @if (Model != null && Model.Any())
                    {
                        var displayedProducts = Model.Take(8).ToList();
                        @foreach (var product in displayedProducts)
                        {
                            <div class="product-item px-2" style="flex: 0 0 25%; min-width: 0;">
                                <div class="card h-100 shadow-sm d-flex flex-column">
                                    <div class="product-image-wrapper position-relative">
                                        @if (product.ProductImages != null && product.ProductImages.Any())
                                        {
                                            var primaryImage = product.ProductImages.FirstOrDefault(img => img.IsPrimary) ?? product.ProductImages.First();
                                            <img src="@primaryImage.ImageURL" class="card-img-top" alt="@product.ProductName" style="height: 300px; object-fit: cover;">
                                        }
                                        else
                                        {
                                            <img src="/images/no-image.png" class="card-img-top" alt="No Image" style="height: 300px; object-fit: cover;">
                                        }
                                        <div class="product-overlay">
                                            <a href="@Url.Action("Details", "Product", new { id = product.ProductID })" class="details-icon">
                                                <i class="bi bi-eye"></i>
                                            </a>
                                        </div>
                                    </div>
                                    <div class="card-body flex-grow-1 d-flex flex-column">
                                        <h5 class="card-title">@product.ProductName</h5>
                                        <p class="card-text product-description">
                                            @(string.IsNullOrEmpty(product.Description) ? "Không có mô tả." : product.Description)
                                        </p>
                                        <p class="card-text mt-2">
                                            <strong>@product.Price.ToString("N0") đ</strong>
                                        </p>
                                        @if (product.ProductColors != null && product.ProductColors.Any())
                                        {
                                            <div class="mb-2">
                                                @foreach (var color in product.ProductColors)
                                                {
                                                    if (color.Color != null)
                                                    {
                                                        <span class="badge bg-secondary me-1">@color.Color.ColorName</span>
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p class="text-center">Không có sản phẩm nào để hiển thị.</p>
                    }
                </div>
                <button class="products-prev custom-arrow" type="button">
                    <i class="bi bi-chevron-left"></i>
                </button>
                <button class="products-next custom-arrow" type="button">
                    <i class="bi bi-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>
</div>
<!-- Banner phụ -->
<div class="container-fluid p-0 mb-5">
    <div class="additional-banner">
        <img src="~/images/banner5.png" class="d-block w-100" alt="Banner 5" style="max-height: 300px; object-fit: cover; border-radius: 15px;">
    </div>
</div>

<!-- Đơn vị cộng tác (Logo carousel) -->
<div class="container mb-5">
    <h3 class="mb-4 text-center">Đơn vị cộng tác</h3>
    <div class="partner-container position-relative">
        <div class="partner-wrapper" id="partnerCarousel">
            <!-- Logo gốc -->
            <div class="partner-item">
                <img src="~/images/partners/dv1.jpg" alt="Partner 1" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv2.jpg" alt="Partner 2" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv3.jpg" alt="Partner 3" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv4.jpg" alt="Partner 4" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv5.jpg" alt="Partner 5" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv6.jpg" alt="Partner 6" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv7.jpg" alt="Partner 7" class="partner-logo">
            </div>
            <!-- Sao chép logo để tạo vòng lặp vô hạn -->
            <div class="partner-item">
                <img src="~/images/partners/dv1.jpg" alt="Partner 1" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv2.jpg" alt="Partner 2" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv3.jpg" alt="Partner 3" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv4.jpg" alt="Partner 4" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv5.jpg" alt="Partner 5" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv6.jpg" alt="Partner 6" class="partner-logo">
            </div>
            <div class="partner-item">
                <img src="~/images/partners/dv7.jpg" alt="Partner 7" class="partner-logo">
            </div>
        </div>
    </div>
</div>

<!-- Nút chat nhỏ -->
<button id="chat-toggle" class="chat-toggle-btn">
    <i class="bi bi-chat-dots"></i>
</button>

<!-- Cửa sổ chat -->
<div id="customer-chat" class="chat-window">
    <div class="chat-header">
        <span>💬 Hỗ trợ trực tuyến</span>
        <button id="close-chat" class="btn-close btn-close-white"></button>
    </div>
    <div class="employee-list" id="employee-list" style="display: none;">
        <h4>Chọn nhân viên hỗ trợ</h4>
        <ul id="employee-list-ul"></ul>
    </div>
    <div class="chat-messages" id="chat-messages"></div>
    <div class="chat-input">
        <input type="text" id="message-input" placeholder="Nhập tin nhắn..." autocomplete="off" />
        <button id="send-button" class="btn nike-btn nike-btn-primary">Gửi</button>
        <button id="retry-button" class="btn nike-btn nike-btn-secondary" style="display: none;">Thử lại</button>
    </div>
</div>

<style>

    /* Banner chính */
    .carousel-inner {
        border-radius: 15px;
        overflow: hidden;
    }

    .carousel-item img {
        width: 100%;
        transition: transform 0.5s ease;
    }

    .carousel-item:hover img {
        transform: scale(1.05);
    }

    .carousel-control-prev, .carousel-control-next {
        width: 5%;
        opacity: 0.7;
        transition: opacity 0.3s ease;
    }

        .carousel-control-prev:hover, .carousel-control-next:hover {
            opacity: 1;
        }

    .carousel-indicators {
        bottom: 10px;
        margin-bottom: 0;
    }

        .carousel-indicators button {
            width: 8px !important;
            height: 8px !important;
            border-radius: 50% !important;
            background-color: #fff !important;
            border: none !important;
            margin: 0 5px;
            opacity: 0.5;
        }

        .carousel-indicators .active {
            opacity: 1;
            background-color: #FFBD71 !important;
        }

    /* Sản phẩm nổi bật */
    .products-container {
        position: relative;
        overflow: hidden;
        padding: 0 50px;
    }

    .products-wrapper {
        transition: transform 0.5s ease;
    }

    .product-item {
        flex: 0 0 25%;
        max-width: 25%;
    }

    .card {
        min-height: 550px; /* Tăng chiều cao tối thiểu để chứa mô tả */
    }

    .card-body {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .card:hover {
        transform: translateY(-5px);
        transition: transform 0.3s ease;
    }

    .card-img-top {
        border-bottom: 1px solid #ddd;
    }

    .product-description {
        font-size: 0.9rem;
        color: #666;
        margin-bottom: 10px;
        display: -webkit-box;
        -webkit-line-clamp: 3; /* Giới hạn 3 dòng */
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 1.4;
    }

    .product-image-wrapper {
        position: relative;
        overflow: hidden;
    }

    .product-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5); /* Màu đen mờ */
        opacity: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: opacity 0.3s ease;
    }

    .product-item:hover .product-overlay {
        opacity: 1;
    }

    .details-icon {
        color: #fff;
        font-size: 2rem;
        transition: transform 0.3s ease;
    }

        .details-icon:hover {
            transform: scale(1.2);
        }

        .details-icon i {
            text-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
        }

    .custom-arrow {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 40px;
        height: 40px;
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        z-index: 10;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

        .custom-arrow:hover {
            background-color: #f8f9fa;
            border-color: #aaa;
        }

    .products-prev {
        left: 10px;
    }

    .products-next {
        right: 10px;
    }

    .custom-arrow i {
        font-size: 1.2rem;
        color: #333;
    }
    .custom-arrow {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        width: 40px;
        height: 40px;
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        z-index: 10;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

        .custom-arrow:hover {
            background-color: #f8f9fa;
            border-color: #aaa;
        }

    .products-prev {
        left: 10px;
    }

    .products-next {
        right: 10px;
    }

    .custom-arrow i {
        font-size: 1.2rem;
        color: #333;
    }

    .btn-light {
        color: #333;
        border-color: #ccc;
        transition: background-color 0.3s ease;
    }

        .btn-light:hover {
            background-color: #e9ecef;
        }

        .btn-light i {
            font-size: 1rem;
        }

    /* Đơn vị cộng tác */
    .partner-container {
        position: relative;
        overflow: hidden;
        width: 100%;
    }

    .partner-wrapper {
        display: flex;
        flex-wrap: nowrap;
        animation: slidePartners 20s linear infinite;
    }

    .partner-item {
        flex: 0 0 20%;
        max-width: 20%;
        text-align: center;
    }

    .partner-logo {
        width: 100px;
        height: 100px;
        object-fit: contain;
        border-radius: 50%;
        border: 2px solid #FFBD71;
        transition: transform 0.3s ease;
    }

    .partner-item:hover .partner-logo {
        transform: scale(1.1);
    }

    @@keyframes slidePartners {
        0% {
            transform: translateX(0);
        }

        100% {
            transform: translateX(-50%);
        }
    }

    /* Chat styles */
    .chat-toggle-btn {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 50px;
        height: 50px;
        background-color: #000;
        color: #fff;
        border: none;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        cursor: pointer;
        transition: all 0.3s ease;
        z-index: 999;
    }

        .chat-toggle-btn:hover {
            background-color: #FF6450;
        }

        .chat-toggle-btn i {
            font-size: 1.5rem;
        }

    .chat-window {
        position: fixed;
        bottom: 80px;
        right: 20px;
        width: 360px;
        height: 500px;
        background: #fff;
        border: 2px solid #000;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        z-index: 1000;
        display: none;
        flex-direction: column;
        font-family: 'Segoe UI', sans-serif;
        opacity: 0;
        transform: scale(0.9);
        transition: opacity 0.3s ease, transform 0.3s ease;
    }

        .chat-window.active {
            display: flex;
            opacity: 1;
            transform: scale(1);
        }

    .chat-header {
        background: #000;
        color: #fff;
        padding: 14px;
        font-weight: bold;
        font-size: 16px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
    }

    .employee-list {
        background: #f9f9f9;
        padding: 10px;
        max-height: 200px;
        overflow-y: auto;
        border-bottom: 1px solid #ddd;
    }

        .employee-list h4 {
            font-size: 14px;
            margin: 0 0 10px;
            color: #333;
        }

        .employee-list ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .employee-list li {
            padding: 8px 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: background-color 0.2s ease;
        }

            .employee-list li:hover {
                background: #e0e0e0;
            }

            .employee-list li.active {
                background: #FF6450;
                color: #fff;
                border-radius: 8px;
            }

            .employee-list li .avatar {
                width: 24px;
                height: 24px;
                border-radius: 50%;
                background: #555;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 12px;
                color: #fff;
            }

            .employee-list li .employee-name {
                flex-grow: 1;
            }

    .chat-messages {
        flex-grow: 1;
        padding: 12px;
        overflow-y: auto;
        background: #f9f9f9;
    }

    .chat-input {
        display: flex;
        padding: 12px;
        border-top: 1px solid #ddd;
        background: #fff;
        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;
        gap: 8px;
    }

        .chat-input input {
            flex-grow: 1;
            border: 1px solid #ccc;
            border-radius: 20px;
            padding: 8px 14px;
            font-size: 14px;
        }

        .chat-input button {
            border-radius: 20px;
            padding: 8px 18px;
        }

    .message {
        margin: 8px 0;
        padding: 10px 14px;
        border-radius: 16px;
        max-width: 80%;
        word-wrap: break-word;
        line-height: 1.4;
    }

        .message.sent {
            background: #FF6450;
            color: #fff;
            margin-left: auto;
            text-align: right;
        }

        .message.received {
            background: #e0e0e0;
            color: #000;
            margin-right: auto;
        }

        .message.error {
            background: #ffe6e6;
            color: #e74c3c;
            border: 1px solid #e74c3c;
            margin-left: auto;
            margin-right: auto;
            text-align: center;
        }

    .nike-btn {
        font-family: 'Arial', sans-serif;
        font-weight: 600;
        text-transform: uppercase;
        padding: 8px 16px;
        border-radius: 20px;
        transition: all 0.3s ease;
        font-size: 0.9rem;
    }

    .nike-btn-primary {
        background-color: #000;
        color: #fff;
        border: 2px solid #000;
    }

        .nike-btn-primary:hover {
            background-color: #FF6450;
            border-color: #FF6450;
            color: #fff;
        }

    .nike-btn-secondary {
        background-color: #fff;
        color: #000;
        border: 2px solid #000;
    }

        .nike-btn-secondary:hover {
            background-color: #f8f9fa;
            border-color: #FF6450;
            color: #FF6450;
        }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script>
        $(document).ready(function () {
            // Chat functionality
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub", { accessTokenFactory: () => '@User.FindFirst("access_token")?.Value' })
                .withAutomaticReconnect({
                    nextRetryDelayInMilliseconds: retryContext => {
                        if (retryContext.elapsedMilliseconds < 60000) {
                            return Math.random() * 2000 + 2000; // 2-4 seconds
                        }
                        return null; // Stop reconnecting after 1 minute
                    }
                })
                .configureLogging(signalR.LogLevel.Information)
                .build();

            const currentUser = '@User.Identity.Name';
            const currentUserId = '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value';
            let employeeId = '@employeeId';
            let employeeName = '';
            let messageHistory = [];

            // Hàm tiện ích
            function formatTimestamp() {
                return new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
            }

            function showMessage(senderId, senderName, message, isSent) {
                const messageClass = isSent ? 'sent' : 'received';
                const displayName = isSent ? 'Bạn' : senderName;
                const timestamp = formatTimestamp();
                const msg = `
                    <div class="message ${messageClass}">
                        <strong>${displayName}:</strong> ${message}
                        <span class="timestamp">${timestamp}</span>
                    </div>`;
                $('#chat-messages').append(msg);
                $('#chat-messages').scrollTop($('#chat-messages')[0].scrollHeight);
                messageHistory.push(msg);
            }

            function showError(message) {
                const errorMsg = `<div class="message error">🚫 ${message}</div>`;
                $('#chat-messages').append(errorMsg);
                $('#chat-messages').scrollTop($('#chat-messages')[0].scrollHeight);
                messageHistory.push(errorMsg);
            }

            function showToast(message, isSuccess) {
                const toast = $('#notificationToast');
                if (toast.length) {
                    toast.find('.toast-body').text(message);
                    toast.removeClass('bg-success bg-danger').addClass(isSuccess ? 'bg-success' : 'bg-danger');
                    toast.toast({ delay: 3000 });
                    toast.toast('show');
                } else {
                    alert(message);
                }
            }

            function updateEmployeeList(employees) {
                const $employeeList = $('#employee-list-ul');
                $employeeList.empty();
                if (employees.length === 0) {
                    $employeeList.append('<li>Không có nhân viên trực tuyến.</li>');
                    $('#send-button').prop('disabled', true);
                } else {
                    employees.forEach(emp => {
                        const avatarInitial = emp.userName.charAt(0).toUpperCase();
                        const listItem = `
                            <li data-employee-id="${emp.id}" data-employee-name="${emp.userName}">
                                <div class="avatar">${avatarInitial}</div>
                                <span class="employee-name">${emp.userName}</span>
                            </li>`;
                        $employeeList.append(listItem);
                    });
                    $('#send-button').prop('disabled', true);
                }
            }

            function fetchEmployeeList() {
                $.ajax({
                    url: '@Url.Action("GetAvailableEmployee", "Chat")',
                    type: 'GET',
                    success: function (response) {
                        if (response.success && response.employees) {
                            $('#employee-list').show();
                            updateEmployeeList(response.employees);
                            $('#chat-messages').empty();
                            showMessage(null, 'Hệ thống', 'Vui lòng chọn nhân viên để bắt đầu trò chuyện.', false);
                        } else {
                            const errorMsg = response.message || 'Không tìm thấy nhân viên hỗ trợ.';
                            showError(`${errorMsg} <a href="#" class="retry-link">Thử lại?</a>`);
                            $('#send-button').prop('disabled', true);
                            $('#retry-button').show();
                            $('.retry-link').off('click').on('click', function (e) {
                                e.preventDefault();
                                $('#retry-button').click();
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Lỗi AJAX:', xhr.responseText);
                        showError('Lỗi kết nối server. Vui lòng thử lại sau. <a href="#" class="retry-link">Thử lại?</a>');
                        $('#send-button').prop('disabled', true);
                        $('#retry-button').show();
                        $('.retry-link').off('click').on('click', function (e) {
                            e.preventDefault();
                            $('#retry-button').click();
                        });
                    }
                });
            }

            // Xử lý sự kiện SignalR
            connection.onclose((error) => {
                console.error("Kết nối bị ngắt:", error);
                showError("🔌 Mất kết nối đến máy chủ. Đang thử kết nối lại...");
                $('#send-button').prop('disabled', true);
            });

            connection.onreconnecting(() => {
                showError("🔄 Đang thử kết nối lại...");
                $('#send-button').prop('disabled', true);
            });

            connection.onreconnected(() => {
                showError("✅ Kết nối được khôi phục.");
                $('#send-button').prop('disabled', false);
                fetchEmployeeList();
            });

            connection.on("ReceivePrivateMessage", (senderId, senderName, message) => {
                console.log(`Nhận tin nhắn từ ${senderName} (${senderId}): ${message}`);
                // Chỉ hiển thị tin nhắn nếu không phải là tin nhắn do chính người dùng gửi
                if (senderId !== currentUserId) {
                    showMessage(senderId, senderName, message, false);
                }
            });

            connection.on("ReceiveError", (errorMessage) => {
                showError(errorMessage);
            });

            connection.on("UpdateEmployeeList", (employees) => {
                updateEmployeeList(employees);
            });

            // Xử lý sự kiện UI
            $('#chat-toggle').on('click', function () {
                if (!'@User.Identity.IsAuthenticated') {
                    showToast('Vui lòng đăng nhập để sử dụng chat!', false);
                    return;
                }
                const $chatWindow = $('#customer-chat');
                if ($chatWindow.hasClass('active')) {
                    $chatWindow.removeClass('active');
                } else {
                    $chatWindow.addClass('active');
                    $('#chat-messages').empty();
                    messageHistory.forEach(msg => $('#chat-messages').append(msg));
                    $('#chat-messages').scrollTop($('#chat-messages')[0].scrollHeight);
                    fetchEmployeeList();
                }
            });

            $('#close-chat').on('click', function () {
                $('#customer-chat').removeClass('active');
                $('#employee-list').show();
                employeeId = '';
                employeeName = '';
                $('#send-button').prop('disabled', true);
            });

            $('#retry-button').on('click', function () {
                $('#retry-button').hide();
                showError("🔄 Đang tìm nhân viên hỗ trợ...");
                fetchEmployeeList();
            });

            $('#employee-list-ul').on('click', 'li', function () {
                employeeId = $(this).data('employee-id');
                employeeName = $(this).data('employee-name');
                $('#employee-list-ul li').removeClass('active');
                $(this).addClass('active');
                $('#employee-list').hide();
                $('#chat-messages').empty();
                messageHistory = [];
                showMessage(null, 'Hệ thống', `Đã kết nối với ${employeeName}.`, false);
                $('#send-button').prop('disabled', false);
            });

            $('#send-button').on('click', function () {
                const message = $('#message-input').val().trim();
                if (!message) {
                    showError("⚠ Vui lòng nhập nội dung!");
                    return;
                }

                if (connection.state !== signalR.HubConnectionState.Connected) {
                    showError("❌ Kết nối không hoạt động. Vui lòng thử lại sau.");
                    return;
                }

                if (!employeeId || employeeId === "" || employeeId === "default-employee-id") {
                    showError("⚠ Vui lòng chọn nhân viên hỗ trợ.");
                    $('#employee-list').show();
                    fetchEmployeeList();
                    return;
                }

                console.log(`Gửi tin nhắn tới ${employeeId}: ${message}`);
                showMessage(currentUserId, 'Bạn', message, true);
                connection.invoke("SendPrivateMessage", employeeId, message)
                    .then(() => {
                        $('#message-input').val('');
                    })
                    .catch(err => {
                        console.error("Lỗi gửi:", err.toString());
                        showError(`🚫 Gửi thất bại: ${err.message}`);
                    });
            });

            $('#message-input').on('keypress', function (e) {
                if (e.key === "Enter") {
                    $('#send-button').click();
                }
            });

            // Khởi tạo kết nối SignalR
            connection.start()
                .then(() => {
                    console.log("✅ SignalR kết nối thành công");
                    fetchEmployeeList();
                })
                .catch(err => {
                    console.error("❌ Không thể kết nối:", err.toString());
                    showError("❌ Lỗi: Không thể kết nối đến máy chủ. <a href='#' class='retry-link'>Thử lại?</a>");
                    $('#send-button').prop('disabled', true);
                    $('#retry-button').show();
                    $('.retry-link').off('click').on('click', function (e) {
                        e.preventDefault();
                        $('#retry-button').click();
                    });
                });

            // Carousel sản phẩm nổi bật
            const $productWrapper = $('.products-wrapper');
            const $productItems = $('.product-item');
            const productItemWidth = $productItems.length > 0 ? $productItems.outerWidth(true) : 0;
            const productVisibleItems = 4;
            const productTotalItems = $productItems.length;
            let productCurrentPosition = 0;
            const productMaxPosition = Math.max(0, productTotalItems - productVisibleItems);

            if (productTotalItems <= productVisibleItems || productTotalItems === 0) {
                $('.products-prev, .products-next').hide();
            } else {
                $('.products-prev, .products-next').show();
            }

            $('.products-next').click(function () {
                if (productCurrentPosition < productMaxPosition) {
                    productCurrentPosition++;
                    $productWrapper.css('transform', `translateX(-${productCurrentPosition * productItemWidth}px)`);
                }
            });

            $('.products-prev').click(function () {
                if (productCurrentPosition > 0) {
                    productCurrentPosition--;
                    $productWrapper.css('transform', `translateX(-${productCurrentPosition * productItemWidth}px)`);
                }
            });

            // Thêm vào giỏ hàng
            $('.add-to-cart').on('click', function () {
                var productId = $(this).data('product-id');
                var sizeId = $('#size-' + productId).val();

                if (!sizeId) {
                    showToast('Vui lòng chọn kích thước trước khi thêm vào giỏ hàng!', false);
                    return;
                }

                showLoading();

                $.ajax({
                    url: '@Url.Action("AddToCart", "Cart")',
                    type: 'POST',
                    data: {
                        productId: productId,
                        sizeId: sizeId,
                        colorId: null,
                        quantity: 1,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        hideLoading();
                        if (response.success) {
                            showToast(response.message, true);
                            $('#cartCount').text(`Cart (${response.cartCount})`);
                            $(document).trigger('cart-updated');
                        } else {
                            showToast(response.message, false);
                        }
                    },
                    error: function (xhr, status, error) {
                        hideLoading();
                        showToast('Đã có lỗi xảy ra: ' + error, false);
                        console.log('AJAX error:', xhr.responseText);
                    }
                });
            });

            function showLoading() {
                $('#loadingOverlay').fadeIn(200);
            }

            function hideLoading() {
                $('#loadingOverlay').fadeOut(200);
            }
        });
    </script>
}