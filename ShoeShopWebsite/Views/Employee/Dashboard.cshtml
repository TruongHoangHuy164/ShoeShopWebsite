@model dynamic
@{
    ViewData["Title"] = "Dashboard Nhân viên";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="dashboard-container">
    <!-- Header -->
    <div class="dashboard-header">
        <h1>Dashboard Nhân viên</h1>
        <div class="user-info">
            <span>Xin chào, @User.Identity.Name</span>
            <span>Ngày: @DateTime.Now.ToString("dd/MM/yyyy")</span>
        </div>
        <div class="header-actions">
            <a href="/Employee/ProductList" class="btn btn-action">Danh sách sản phẩm</a>
            <a href="/Employee/OrderList" class="btn btn-action">Danh sách đơn hàng</a>
            <a href="/Employee/ChatEmployee" class="btn btn-action">Chăm sóc khách hàng</a>
        </div>
    </div>

    <!-- Thống kê -->
    <div class="stats-grid">
        <div class="stat-card" data-type="pending">
            <h3>Đơn hàng chờ xử lý</h3>
            <p id="pendingOrders">0</p>
        </div>
        <div class="stat-card" data-type="delivering">
            <h3>Đơn hàng đang giao</h3>
            <p id="deliveringOrders">0</p>
        </div>
        <div class="stat-card" data-type="low-stock">
            <h3>Sản phẩm sắp hết hàng</h3>
            <p id="lowStockProducts">0</p>
        </div>
    </div>

    <!-- Đơn hàng gần đây -->
    <div class="section">
        <div class="section-header">
            <h2>Đơn hàng gần đây</h2>
        </div>
        <div class="table-responsive">
            <table class="data-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Khách hàng</th>
                        <th>Tổng tiền</th>
                        <th>Trạng thái</th>
                        <th>Hành động</th>
                    </tr>
                </thead>
                <tbody id="orderList"></tbody>
            </table>
        </div>
    </div>

    <!-- Sản phẩm tồn kho thấp -->
    <div class="section">
        <div class="section-header">
            <h2>Sản phẩm tồn kho thấp</h2>
        </div>
        <div class="table-responsive">
            <table class="data-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Tên sản phẩm</th>
                        <th>Tồn kho</th>
                        <th>Hành động</th>
                    </tr>
                </thead>
                <tbody id="productList"></tbody>
            </table>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .dashboard-container {
            max-width: 1300px;
            margin: 30px auto;
            padding: 20px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
        }

        /* Header */
        .dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-bottom: 25px;
            flex-wrap: wrap;
            gap: 15px;
        }

            .dashboard-header h1 {
                font-size: 26px;
                color: #2c3e50;
                margin: 0;
            }

        .user-info {
            font-size: 14px;
            color: #7f8c8d;
        }

            .user-info span {
                margin-right: 15px;
            }

        .header-actions {
            display: flex;
            gap: 10px;
        }

        .btn-action {
            padding: 8px 16px;
            background: #3498db;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            font-size: 14px;
            transition: background 0.3s ease;
        }

            .btn-action:hover {
                background: #2980b9;
            }

        /* Thống kê */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            background: #fff;
            border: 1px solid #ecf0f1;
            transition: transform 0.2s ease, box-shadow 0.3s ease;
        }

            .stat-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
            }

            .stat-card h3 {
                font-size: 16px;
                color: #7f8c8d;
                margin-bottom: 10px;
            }

            .stat-card p {
                font-size: 28px;
                font-weight: 700;
                margin: 0;
            }

            .stat-card[data-type="pending"] {
                border-left: 5px solid #f39c12;
                color: #f39c12;
            }

            .stat-card[data-type="delivering"] {
                border-left: 5px solid #8e44ad;
                color: #8e44ad;
            }

            .stat-card[data-type="low-stock"] {
                border-left: 5px solid #27ae60;
                color: #27ae60;
            }

        /* Section */
        .section {
            margin-bottom: 40px;
        }

        .section-header {
            margin-bottom: 15px;
            border-bottom: 2px solid #3498db;
            padding-bottom: 5px;
        }

            .section-header h2 {
                font-size: 20px;
                color: #2c3e50;
                margin: 0;
            }

        /* Bảng */
        .table-responsive {
            overflow-x: auto;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            background: #fff;
        }

            .data-table th,
            .data-table td {
                padding: 12px 15px;
                text-align: left;
                border-bottom: 1px solid #ecf0f1;
            }

            .data-table th {
                background: #f1f3f5;
                font-weight: 600;
                color: #2c3e50;
            }

            .data-table tr:hover {
                background: #f9fbfc;
                transition: background 0.2s ease;
            }

        .size-stock {
            display: block;
            font-size: 13px;
            margin: 3px 0;
        }

        .stock-critical {
            color: #e74c3c;
            font-weight: bold;
        }

        /* Nút hành động */
        .btn {
            padding: 6px 12px;
            border-radius: 4px;
            text-decoration: none;
            font-size: 13px;
            transition: background 0.3s ease;
        }

        .btn-view {
            background: #bdc3c7;
            color: #fff;
        }

            .btn-view:hover {
                background: #95a5a6;
            }

        .btn-confirm {
            background: #e67e22;
            color: #fff;
        }

            .btn-confirm:hover {
                background: #d35400;
            }

        .btn-deliver {
            background: #8e44ad;
            color: #fff;
        }

            .btn-deliver:hover {
                background: #6c3483;
            }

        /* Trạng thái */
        .status {
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .status-pending {
            background: #fce4d6;
            color: #e67e22;
        }

        .status-confirmed {
            background: #d6eaf8;
            color: #2980b9;
        }

        .status-delivering {
            background: #e8d6f5;
            color: #8e44ad;
        }

        .status-completed {
            background: #d4efdf;
            color: #27ae60;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            fetch('/Employee/GetDashboardData')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        $('#pendingOrders').text(data.pendingOrders);
                        $('#deliveringOrders').text(data.deliveringOrders);
                        $('#lowStockProducts').text(data.lowStockProducts);

                        const orderTbody = $('#orderList');
                        data.recentOrders.forEach(o => {
                            const statusClass = o.status === 'Pending' ? 'status-pending' :
                                o.status === 'Confirmed' ? 'status-confirmed' :
                                o.status === 'Delivering' ? 'status-delivering' : 'status-completed';
                            orderTbody.append(`
                                <tr>
                                    <td>${o.orderID}</td>
                                    <td>${o.fullName}</td>
                                    <td>${o.totalPrice.toLocaleString('vi-VN')} VNĐ</td>
                                    <td><span class="status ${statusClass}">${o.status}</span></td>
                                    <td>
                                        <a href="/Employee/OrderDetails/${o.orderID}" class="btn btn-view">Xem</a>
                                        ${o.status === 'Pending' ? `<a href="#" class="btn btn-confirm" onclick="confirmOrder(${o.orderID}); return false;">Xác nhận</a>` : ''}
                                        ${o.status === 'Confirmed' ? `<a href="#" class="btn btn-deliver" onclick="deliverOrder(${o.orderID}); return false;">Giao hàng</a>` : ''}
                                    </td>
                                </tr>
                            `);
                        });

                        const productTbody = $('#productList');
                        data.lowStock.forEach(p => {
                            let sizeStockHtml = p.sizes.map(size => `
                                <span class="size-stock">
                                    <strong>${size.sizeName}:</strong>
                                    <span class="${size.stock < 10 ? 'stock-critical' : ''}">${size.stock}</span>
                                </span>
                            `).join('');
                            productTbody.append(`
                                <tr>
                                    <td>${p.productID}</td>
                                    <td>${p.productName}</td>
                                    <td>${sizeStockHtml}</td>
                                    <td><a href="/Employee/ProductDetails/${p.productID}" class="btn btn-view">Xem</a></td>
                                </tr>
                            `);
                        });
                    } else {
                        showToast(data.message, false);
                    }
                })
                .catch(error => {
                    console.error('Error fetching dashboard data:', error);
                    showToast('Không thể tải dữ liệu dashboard!', false);
                });

            // Xác nhận đơn hàng
            window.confirmOrder = function(orderId) {
                if (confirm('Bạn có chắc muốn xác nhận đơn hàng này?')) {
                    showLoading();
                    fetch(`/Employee/ConfirmOrder/${orderId}`, {
                        method: 'POST',
                        headers: { 'X-CSRF-TOKEN': '@Html.AntiForgeryToken().ToString()' }
                    })
                    .then(response => response.json())
                    .then(data => {
                        hideLoading();
                        showToast(data.message, data.success);
                        if (data.success) location.reload();
                    })
                    .catch(error => {
                        hideLoading();
                        showToast('Lỗi khi xác nhận đơn hàng!', false);
                        console.error('Error:', error);
                    });
                }
            };

            // Giao hàng
            window.deliverOrder = function(orderId) {
                if (confirm('Bạn có chắc muốn bắt đầu giao hàng?')) {
                    showLoading();
                    fetch(`/Employee/DeliverOrder/${orderId}`, {
                        method: 'POST',
                        headers: { 'X-CSRF-TOKEN': '@Html.AntiForgeryToken().ToString()' }
                    })
                    .then(response => response.json())
                    .then(data => {
                        hideLoading();
                        showToast(data.message, data.success);
                        if (data.success) location.reload();
                    })
                    .catch(error => {
                        hideLoading();
                        showToast('Lỗi khi bắt đầu giao hàng!', false);
                        console.error('Error:', error);
                    });
                }
            };
        });
    </script>
}