@model dynamic
@{
    ViewData["Title"] = "Dashboard Nhân viên";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container dashboard-container">
    <div class="header">
        <h1>Dashboard Nhân viên</h1>
        <p>Xin chào, @User.Identity.Name | Ngày: @DateTime.Now.ToString("dd/MM/yyyy")</p>
        <a href="ProductList" class="btn btn-product-list">Hiển thị danh sách sản phẩm</a>
    </div>

    <div class="stats">
        <div class="stat-card pending">
            <h3>Đơn hàng chờ xử lý</h3>
            <p id="pendingOrders">0</p>
        </div>
        <div class="stat-card delivering">
            <h3>Đơn hàng đang giao</h3>
            <p id="deliveringOrders">0</p>
        </div>
        <div class="stat-card low-stock">
            <h3>Sản phẩm sắp hết hàng</h3>
            <p id="lowStockProducts">0</p>
        </div>
    </div>

    <div class="section recent-orders">
        <h2>Đơn hàng gần đây</h2>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Khách hàng</th>
                    <th>Tổng tiền</th>
                    <th>Trạng thái</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody id="orderList"></tbody>
        </table>
    </div>

    <div class="section low-stock-products">
        <h2>Sản phẩm tồn kho thấp</h2>
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Tên sản phẩm</th>
                    <th>Tồn kho</th>
                    <th>Hành động</th>
                </tr>
            </thead>
            <tbody id="productList"></tbody>
        </table>
    </div>
</div>

@section Styles {
    <style>
        .dashboard-container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            background-color: #FFFFFF;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .header {
            background-color: #F9F9F9;
            padding: 10px 15px;
            border-radius: 6px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
        }

            .header h1 {
                font-size: 28px;
                color: #333333;
                margin-bottom: 5px;
            }

            .header p {
                font-size: 14px;
                color: #999999;
                margin: 0;
            }

        .stats {
            display: flex;
            gap: 20px;
            margin: 20px 0;
        }

        .stat-card {
            flex: 1;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            border: 1px solid #E0E0E0;
            transition: box-shadow 0.3s ease, transform 0.2s ease;
        }

            .stat-card:hover {
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
                transform: translateY(-2px);
            }

            .stat-card h3 {
                font-size: 16px;
                color: #666666;
                margin: 0 0 10px 0;
            }

            .stat-card p {
                font-size: 24px;
                color: #333333;
                font-weight: bold;
                margin: 0;
            }

            .stat-card.pending {
                background-color: #FFF8F0;
                border-left: 4px solid #FFCC80;
            }

            .stat-card.delivering {
                background-color: #F6F0FA;
                border-left: 4px solid #CE93D8;
            }

            .stat-card.low-stock {
                background-color: #F5F9F5;
                border-left: 4px solid #A5D6A7;
            }

        .section {
            margin-bottom: 30px;
        }

            .section h2 {
                font-size: 20px;
                color: #333333;
                margin-bottom: 15px;
                padding-bottom: 5px;
                border-bottom: 2px solid #E0E0E0;
            }

        .recent-orders h2 {
            border-bottom-color: #FFCC80;
        }

        .low-stock-products h2 {
            border-bottom-color: #A5D6A7;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

            .table th, .table td {
                padding: 12px;
                border-bottom: 1px solid #E0E0E0;
                color: #666666;
                text-align: left;
            }

            .table th {
                background-color: #F5F5F5;
                color: #666666;
                font-weight: 600;
            }

            .table tr:hover {
                background-color: #FAFAFA;
                transition: background-color 0.2s ease;
            }

        .size-stock {
            display: block;
            font-size: 13px;
            margin: 2px 0;
        }

        .stock-critical {
            color: #F44336;
            font-weight: bold;
        }

        .btn {
            padding: 6px 12px;
            text-decoration: none;
            border-radius: 4px;
            font-size: 14px;
            display: inline-block;
            margin-right: 5px;
            transition: background-color 0.3s ease;
        }

        .btn-view {
            background-color: #E0E0E0;
            color: #333333;
        }

            .btn-view:hover {
                background-color: #D0D0D0;
            }

        .btn-confirm {
            background-color: #666666;
            color: #FFFFFF;
        }

            .btn-confirm:hover {
                background-color: #555555;
            }

        .btn-deliver {
            background-color: #999999;
            color: #FFFFFF;
        }

            .btn-deliver:hover {
                background-color: #888888;
            }

        .btn-product-list {
            background-color: gray;
            color: #FFFFFF;
            padding: 8px 16px;
            font-size: 14px;
        }

            .btn-product-list:hover {
                background-color: darkgray;
            }

        .status {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 14px;
            font-weight: 500;
        }

        .status-pending {
            background-color: #FFF3E0;
            color: #FF9800;
        }

        .status-confirmed {
            background-color: #E3F2FD;
            color: #2196F3;
        }

        .status-delivering {
            background-color: #F3E5F5;
            color: #9C27B0;
        }

        .status-completed {
            background-color: #E8F5E9;
            color: #4CAF50;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            fetch('/Employee/GetDashboardData')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById('pendingOrders').innerText = data.pendingOrders;
                        document.getElementById('deliveringOrders').innerText = data.deliveringOrders;
                        document.getElementById('lowStockProducts').innerText = data.lowStockProducts;

                        const orderTbody = document.getElementById('orderList');
                        data.recentOrders.forEach(o => {
                            const statusClass = o.status === 'Pending' ? 'status-pending' :
                                o.status === 'Confirmed' ? 'status-confirmed' :
                                o.status === 'Delivering' ? 'status-delivering' : 'status-completed';
                            orderTbody.innerHTML += `
                                <tr>
                                    <td>${o.orderID}</td>
                                    <td>${o.fullName}</td>
                                    <td>${o.totalPrice.toLocaleString()} VNĐ</td>
                                    <td><span class="${statusClass}">${o.status}</span></td>
                                    <td>
                                        <a href="/Employee/OrderDetails/${o.orderID}" class="btn btn-view">Xem</a>
                                        ${o.status === 'Pending' ? `<a href="#" class="btn btn-confirm" onclick="confirmOrder(${o.orderID}); return false;">Xác nhận</a>` : ''}
                                        ${o.status === 'Confirmed' ? `<a href="#" class="btn btn-deliver" onclick="deliverOrder(${o.orderID}); return false;">Giao hàng</a>` : ''}
                                    </td>
                                </tr>`;
                        });

                        const productTbody = document.getElementById('productList');
                        data.lowStock.forEach(p => {
                            let sizeStockHtml = '';
                            p.sizes.forEach(size => {
                                const stockClass = size.stock < 10 ? 'stock-critical' : '';
                                sizeStockHtml += `<span class="size-stock"><strong>${size.sizeName}:</strong> <span class="${stockClass}">${size.stock}</span></span>`;
                            });
                            productTbody.innerHTML += `
                                <tr>
                                    <td>${p.productID}</td>
                                    <td>${p.productName}</td>
                                    <td>${sizeStockHtml}</td>
                                    <td><a href="/Employee/ProductDetails/${p.productID}" class="btn btn-view">Xem</a></td>
                                </tr>`;
                        });
                    } else {
                        showToast(data.message, false);
                    }
                })
                .catch(error => {
                    console.error('Lỗi:', error);
                    showToast('Đã xảy ra lỗi khi tải dữ liệu!', false);
                });

            function confirmOrder(orderId) {
                if (confirm('Xác nhận đơn hàng này?')) {
                    showLoading();
                    fetch(`/Employee/ConfirmOrder/${orderId}`, {
                        method: 'POST',
                        headers: { 'X-CSRF-TOKEN': '@Html.AntiForgeryToken().ToString()' }
                    })
                    .then(response => response.json())
                    .then(data => {
                        hideLoading();
                        showToast(data.message, data.success);
                        if (data.success) location.reload();
                    })
                    .catch(error => {
                        hideLoading();
                        showToast('Đã xảy ra lỗi khi xác nhận đơn hàng!', false);
                        console.error('Lỗi:', error);
                    });
                }
            }

            function deliverOrder(orderId) {
                if (confirm('Bắt đầu giao hàng?')) {
                    showLoading();
                    fetch(`/Employee/DeliverOrder/${orderId}`, {
                        method: 'POST',
                        headers: { 'X-CSRF-TOKEN': '@Html.AntiForgeryToken().ToString()' }
                    })
                    .then(response => response.json())
                    .then(data => {
                        hideLoading();
                        showToast(data.message, data.success);
                        if (data.success) location.reload();
                    })
                    .catch(error => {
                        hideLoading();
                        showToast('Đã xảy ra lỗi khi bắt đầu giao hàng!', false);
                        console.error('Lỗi:', error);
                    });
                }
            }
        });
    </script>
}