@using ShoeShopWebsite.Models
@model ShoeShopWebsite.Models.DiscountCode
@{
    ViewData["Title"] = "Thêm mã giảm giá - ShoeShopWebsite";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container my-5">
    <h1 class="mb-4">Thêm mã giảm giá</h1>

    <!-- Alerts -->
    <div class="alert-container mb-4">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (ViewData.ModelState.Any(x => x.Value.Errors.Any()))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>Lỗi nhập liệu từ server:</strong>
                <ul class="mb-0">
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        <div id="clientErrors" class="alert alert-danger alert-dismissible fade show d-none" role="alert">
            <strong>Lỗi nhập liệu từ client:</strong>
            <ul id="clientErrorList" class="mb-0"></ul>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <form asp-area="Admin" asp-controller="Discount" asp-action="CreateDiscountCode" method="post" id="discountForm">
                @Html.AntiForgeryToken()

                <div class="mb-3">
                    <label asp-for="Code" class="form-label fw-medium">Mã giảm giá</label>
                    <input asp-for="Code" name="Code" class="form-control" maxlength="50" placeholder="Nhập mã (ví dụ: SALE2025)" value="@Model.Code" />
                    <span asp-validation-for="Code" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="DiscountType" class="form-label fw-medium">Loại giảm giá</label>
                    <select asp-for="DiscountType" name="DiscountType" class="form-select" id="DiscountType">
                        <option value="" disabled @(Model.DiscountType == null ? "selected" : "")>Chọn loại giảm giá</option>
                        <option value="0" @(Model.DiscountType == DiscountTypeEnum.Percentage ? "selected" : "")>Phần trăm</option>
                        <option value="1" @(Model.DiscountType == DiscountTypeEnum.Fixed ? "selected" : "")>Số tiền cố định</option>
                    </select>
                    <span asp-validation-for="DiscountType" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="DiscountValue" class="form-label fw-medium">Giá trị giảm giá</label>
                    <input asp-for="DiscountValue" name="DiscountValue" class="form-control" type="number" step="0.01" min="0" id="DiscountValue" placeholder="Nhập giá trị" value="@Model.DiscountValue" />
                    <span asp-validation-for="DiscountValue" class="text-danger"></span>
                    <div class="invalid-feedback" id="discountValueFeedback">Vui lòng nhập giá trị hợp lệ.</div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="StartDate" class="form-label fw-medium">Ngày bắt đầu</label>
                        <input asp-for="StartDate" name="StartDate" class="form-control" type="date" id="StartDate" value="@Model.StartDate.ToString("yyyy-MM-dd")" />
                        <span asp-validation-for="StartDate" class="text-danger"></span>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="ExpiryDate" class="form-label fw-medium">Ngày hết hạn</label>
                        <input asp-for="ExpiryDate" name="ExpiryDate" class="form-control" type="date" id="ExpiryDate" value="@Model.ExpiryDate.ToString("yyyy-MM-dd")" />
                        <span asp-validation-for="ExpiryDate" class="text-danger"></span>
                    </div>
                </div>

                <div class="mb-3">
                    <label asp-for="MaxUsage" class="form-label fw-medium">Số lần sử dụng tối đa</label>
                    <input asp-for="MaxUsage" name="MaxUsage" class="form-control" type="number" min="0" step="1" id="MaxUsage" placeholder="Nhập số lần (0 = không giới hạn)" value="@Model.MaxUsage" />
                    <span asp-validation-for="MaxUsage" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="MinOrderValue" class="form-label fw-medium">Giá trị đơn hàng tối thiểu</label>
                    <input asp-for="MinOrderValue" name="MinOrderValue" class="form-control" type="number" step="0.01" min="0" id="MinOrderValue" placeholder="Nhập giá trị (VND)" value="@Model.MinOrderValue" />
                    <span asp-validation-for="MinOrderValue" class="text-danger"></span>
                </div>

                <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="IsActive" name="IsActive" value="true" @(Model.IsActive ? "checked" : "") />
                    <input type="hidden" name="IsActive" value="false" />
                    <label for="IsActive" class="form-check-label">Kích hoạt</label>
                    <span asp-validation-for="IsActive" class="text-danger"></span>
                </div>

                <div class="d-flex justify-content-end gap-2">
                    <a href="@Url.Action("ListDiscountCodes", "Discount")" class="btn btn-secondary">Quay lại</a>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-2"></i>Thêm mã
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        .container {
            max-width: 800px;
        }

        .card {
            border-radius: 10px;
            border: none;
        }

        .form-label {
            font-weight: 500;
            color: #333;
        }

        .form-control, .form-select {
            border-radius: 6px;
            padding: 10px;
        }

            .form-control:focus, .form-select:focus {
                border-color: #007bff;
                box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
            }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
            padding: 10px 20px;
        }

            .btn-primary:hover {
                background-color: #0056b3;
                border-color: #0056b3;
            }

        .btn-secondary {
            background-color: #6c757d;
            border-color: #6c757d;
            padding: 10px 20px;
        }

            .btn-secondary:hover {
                background-color: #5a6268;
                border-color: #5a6268;
            }

        .alert {
            border-radius: 6px;
        }

        .invalid-feedback {
            font-size: 0.875rem;
        }

        #clientErrors {
            display: none;
        }

            #clientErrors.show {
                display: block;
            }
    </style>
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    <partial name="_ValidationScriptsPartial" />
    <script>
        $(document).ready(function () {
            const form = $('#discountForm');
            const discountType = $('#DiscountType');
            const discountValue = $('#DiscountValue');
            const startDate = $('#StartDate');
            const expiryDate = $('#ExpiryDate');
            const maxUsage = $('#MaxUsage');
            const minOrderValue = $('#MinOrderValue');
            const clientErrors = $('#clientErrors');
            const clientErrorList = $('#clientErrorList');

            // Debug form submission
            form.on('submit', function (e) {
                console.log('Form submitting to: ' + (form.attr('action') || 'undefined') + ' with method: ' + form.attr('method'));
                console.log('Form data: ', form.serialize());
                console.log('DiscountType value:', discountType.val());
                console.log('MaxUsage value:', maxUsage.val());
                console.log('MinOrderValue value:', minOrderValue.val());

                // Reset lỗi client-side
                clientErrors.addClass('d-none').removeClass('show');
                clientErrorList.empty();

                // Danh sách lỗi
                const errors = [];

                // Kiểm tra các trường
                const discountTypeVal = discountType.val();
                if (!discountTypeVal || discountTypeVal === '') {
                    errors.push('Vui lòng chọn loại giảm giá.');
                    console.log('DiscountType validation failed:', discountTypeVal);
                }

                const maxUsageVal = maxUsage.val();
                if (!maxUsageVal || parseInt(maxUsageVal) < 0 || isNaN(parseInt(maxUsageVal))) {
                    errors.push('Vui lòng nhập số lần sử dụng tối đa hợp lệ.');
                    console.log('MaxUsage validation failed:', maxUsageVal);
                }

                const minOrderVal = minOrderValue.val();
                if (!minOrderVal || parseFloat(minOrderVal) < 0 || isNaN(parseFloat(minOrderVal))) {
                    errors.push('Vui lòng nhập giá trị đơn hàng tối thiểu hợp lệ.');
                    console.log('MinOrderValue validation failed:', minOrderVal);
                }

                const type = discountTypeVal;
                const value = parseFloat(discountValue.val());
                if (type === '0' && (value <= 0 || value > 100)) {
                    errors.push('Giá trị giảm giá phải từ 0 đến 100% khi chọn loại Phần trăm.');
                    discountValue[0].setCustomValidity('Invalid');
                    $('#discountValueFeedback').text('Giá trị giảm giá phải từ 0 đến 100%.');
                } else if (type === '1' && value <= 0) {
                    errors.push('Giá trị giảm giá phải lớn hơn 0 khi chọn loại Số tiền cố định.');
                    discountValue[0].setCustomValidity('Invalid');
                    $('#discountValueFeedback').text('Giá trị giảm giá phải lớn hơn 0.');
                } else {
                    discountValue[0].setCustomValidity('');
                }

                const start = new Date(startDate.val());
                const expiry = new Date(expiryDate.val());
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                if (start < today) {
                    errors.push('Ngày bắt đầu không được nhỏ hơn ngày hiện tại.');
                    startDate[0].setCustomValidity('Invalid');
                    startDate.next('.text-danger').text('Ngày bắt đầu không được nhỏ hơn ngày hiện tại.');
                } else {
                    startDate[0].setCustomValidity('');
                    startDate.next('.text-danger').text('');
                }

                if (start && expiry && expiry < start) {
                    errors.push('Ngày hết hạn phải lớn hơn hoặc bằng ngày bắt đầu.');
                    expiryDate[0].setCustomValidity('Invalid');
                    expiryDate.next('.text-danger').text('Ngày hết hạn phải lớn hơn hoặc bằng ngày bắt đầu.');
                } else {
                    expiryDate[0].setCustomValidity('');
                    expiryDate.next('.text-danger').text('');
                }

                if (errors.length > 0) {
                    e.preventDefault();
                    e.stopPropagation();
                    errors.forEach(error => clientErrorList.append(`<li>${error}</li>`));
                    clientErrors.removeClass('d-none').addClass('show');
                    console.log('Form validation failed. Errors:', errors);
                    return false;
                }

                // Gửi AJAX để debug response
                e.preventDefault();
                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function (response) {
                        console.log('Server response:', response);
                        if (response.redirectUrl) {
                            window.location.href = response.redirectUrl;
                        } else {
                            $('body').html(response);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('AJAX error:', status, error, xhr.responseText);
                        clientErrorList.append(`<li>Lỗi server: ${xhr.status} ${error}</li>`);
                        clientErrors.removeClass('d-none').addClass('show');
                    }
                });
            });

            discountType.on('change', function () {
                const type = $(this).val();
                const feedback = $('#discountValueFeedback');
                feedback.text('');
                discountValue[0].setCustomValidity('');
                if (type === '0') {
                    discountValue.attr('max', 100).attr('min', 0).attr('placeholder', 'Nhập phần trăm (0-100)');
                    if (parseFloat(discountValue.val()) > 100) {
                        discountValue.val('');
                    }
                } else if (type === '1') {
                    discountValue.removeAttr('max').attr('min', 0).attr('placeholder', 'Nhập số tiền (VND)');
                } else {
                    discountValue.removeAttr('max').removeAttr('min').attr('placeholder', 'Nhập giá trị');
                }
                discountValue.trigger('input');
            });

            discountValue.on('input', function () {
                const value = parseFloat($(this).val());
                const type = discountType.val();
                const feedback = $('#discountValueFeedback');
                if (!type) {
                    feedback.text('Vui lòng chọn loại giảm giá trước.');
                    $(this)[0].setCustomValidity('Invalid');
                } else if (type === '0' && (value <= 0 || value > 100)) {
                    feedback.text('Giá trị giảm giá phải từ 0 đến 100% khi chọn loại Phần trăm.');
                    $(this)[0].setCustomValidity('Invalid');
                } else if (type === '1' && value <= 0) {
                    feedback.text('Giá trị giảm giá phải lớn hơn 0 khi chọn loại Số tiền cố định.');
                    $(this)[0].setCustomValidity('Invalid');
                } else {
                    feedback.text('');
                    $(this)[0].setCustomValidity('');
                }
            });

            startDate.on('change', function () {
                const today = new Date().toISOString().split('T')[0];
                $(this).attr('min', today);
                const start = new Date($(this).val());
                const expiry = new Date(expiryDate.val());
                if (start < new Date(today)) {
                    $(this)[0].setCustomValidity('Invalid');
                    $(this).next('.text-danger').text('Ngày bắt đầu không được nhỏ hơn ngày hiện tại.');
                } else if (start && expiry && expiry < start) {
                    expiryDate[0].setCustomValidity('Invalid');
                    expiryDate.next('.text-danger').text('Ngày hết hạn phải lớn hơn hoặc bằng ngày bắt đầu.');
                    $(this)[0].setCustomValidity('');
                    $(this).next('.text-danger').text('');
                } else {
                    $(this)[0].setCustomValidity('');
                    $(this).next('.text-danger').text('');
                    expiryDate[0].setCustomValidity('');
                    expiryDate.next('.text-danger').text('');
                }
            });

            expiryDate.on('change', function () {
                const start = new Date(startDate.val());
                const expiry = new Date($(this).val());
                if (start && expiry && expiry < start) {
                    $(this)[0].setCustomValidity('Invalid');
                    $(this).next('.text-danger').text('Ngày hết hạn phải lớn hơn hoặc bằng ngày bắt đầu.');
                } else {
                    $(this)[0].setCustomValidity('');
                    $(this).next('.text-danger').text('');
                }
            });

            maxUsage.add(minOrderValue).on('input', function () {
                const value = parseFloat($(this).val());
                const feedback = $(this).next('.text-danger');
                if (value < 0 || isNaN(value)) {
                    $(this)[0].setCustomValidity('Invalid');
                    feedback.text($(this).attr('id') === 'MaxUsage' ? 'Số lần sử dụng tối đa không được nhỏ hơn 0.' : 'Giá trị đơn hàng tối thiểu không được nhỏ hơn 0.');
                } else {
                    $(this)[0].setCustomValidity('');
                    feedback.text('');
                }
            });

            form.find('input, select').on('input change', function () {
                $(this).next('.text-danger').text('');
                $(this)[0].setCustomValidity('');
                clientErrors.addClass('d-none').removeClass('show');
                clientErrorList.empty();
            });
        });
    </script>
}